{{ .License -}}
# Code generated by elegen. DO NOT EDIT.
# Source: go.acuvity.ai/elemental (templates/base.py.tmpl)


from typing import TypeVar
from pydantic import BaseModel, model_validator

try:
    import msgpack
    import msgpack.ext
    HAVE_MSGPACK = True
except ImportError:
    HAVE_MSGPACK = False

class ElementalModel(BaseModel):
    """
    ElementalModel is the base class for all models that were generated from an elemental spec.
    It serves mainly as a marker that all of these classes are models which are derived from elemental.
    However, it also extends this class with utility functions that are useful for all models.
    """
    @model_validator(mode="before")
    def convert_msgpack_timestamps(cls, values):
        """
        This validator runs before any other field-level validation.
        It converts any `msgpack.ext.Timestamp` in the model to a `datetime` object
        so that we can have normal datetime objects in the model and still use msgpack
        and json interchangeably.
        """
        if not HAVE_MSGPACK:
            return values
        else:
            # Iterate through all fields and check for `msgpack.ext.Timestamp`
            for field, value in values.items():
                if isinstance(value, msgpack.ext.Timestamp):
                    # values[field] = datetime.fromtimestamp(value.seconds + value.nanoseconds / 1e9)
                    values[field] = value.to_datetime()
            return values

ElementalObject = TypeVar('ElementalObject', bound=ElementalModel)
